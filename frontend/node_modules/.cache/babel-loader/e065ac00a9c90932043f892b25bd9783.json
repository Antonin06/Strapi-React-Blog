{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n\n      try {\n        const res = await fetch(url);\n        const json = await res.json();\n        setData(json);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n  return {\n    loading,\n    error,\n    data\n  };\n};\n\n_s(useFetch, \"cdnblwmK9QuMyYTkxGRQb1PLKRw=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/laragon/www/Strapi-React/frontend/src/hooks/useFecth.js"],"names":["useEffect","useState","useFetch","url","data","setData","error","setError","loading","setLoading","fetchData","res","fetch","json"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,SAAS,GAAG,YAAY;AAC7BD,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACH,cAAME,GAAG,GAAG,MAAMC,KAAK,CAACT,GAAD,CAAvB;AACA,cAAMU,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;AACAR,QAAAA,OAAO,CAACQ,IAAD,CAAP;AACAJ,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA,OALD,CAKE,OAAOH,KAAP,EAAc;AACfC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD,KAXD;;AAaAC,IAAAA,SAAS;AAEV,GAhBQ,EAgBN,CAACP,GAAD,CAhBM,CAAT;AAkBA,SAAO;AAAEK,IAAAA,OAAF;AAAWF,IAAAA,KAAX;AAAkBF,IAAAA;AAAlB,GAAP;AACA,CAxBD;;GAAMF,Q;;AA0BN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n\tconst [data, setData] = useState(null);\r\n\tconst [error, setError] = useState(null);\r\n\tconst [loading, setLoading] = useState(true);\r\n\r\n\tuseEffect(() => {\r\n\t\t\tconst fetchData = async () => {\r\n\t\t\t\tsetLoading(true)\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst res = await fetch(url)\r\n\t\t\t\t\tconst json = await res.json()\r\n\t\t\t\t\tsetData(json)\r\n\t\t\t\t\tsetLoading(false)\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tsetError(error)\r\n\t\t\t\t\tsetLoading(false)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfetchData()\r\n\r\n\t}, [url]);\r\n\r\n\treturn { loading, error, data };\r\n}\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}